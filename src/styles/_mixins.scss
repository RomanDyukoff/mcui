@import '~bourbon/core/bourbon';

/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES

  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)

  @param {Number}  $fallback    - Fallback for viewport-based units (optional)

  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:

  @include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

// Reset
@mixin reset {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/
@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}

@mixin align($vertical: true, $horizontal: false, $position: relative) {
  @if $position {
    position: $position;
  }
  @if $vertical {
    top: 50%;
  }
  @if $horizontal {
    left: 50%;
  }

  @if $vertical and $horizontal {
    transform: translateX(-50%) translateY(-50%);
  } @else if $vertical {
    transform: translateY(-50%);
  } @else {
    transform: translateX(-50%);
  }
}

@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

/*
	Responsive ratio
	Used for creating scalable elements that maintain the same ratio
	example:
	.element {
		@include responsive-ratio(400, 300);
	}
*/

@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");

  @if $pseudo {
    &::before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin selection {
  ::-moz-selection {
    @content;
  }
  ::selection {
    @content;
  }
}

@mixin reset-text-indents() {
  font-size: 0;
  line-height: 0;
}

// Reset btn styles

@mixin reset-btn() {
  box-sizing: border-box;
  display: block;
  margin: 0;
  padding: 0;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  text-align: center;
  text-decoration: none;
  text-transform: none;
  border-radius: 0;
  border: none;
  background-color: transparent;
  background-image: none;
  cursor: pointer;
  outline: 0;
  font-size: 0;
  line-height: 0;
  font-family: inherit;
  -webkit-appearance: none;
  -webkit-text-fill-color: currentColor;

  &:focus {
    outline: 0;
  }
}

@mixin default-link($main-color: $color-black, $second-color: $color-blue) {
  color: $main-color;
  &:hover,
  &:focus {
    color: $second-color;
  }

  &:active {
    color: darken($second-color, 8%);
  }
}

@mixin delete-link() {
  @include default-link($color-black, $color-red);
}
@mixin text-link() {
  @include default-link($color-blue, $color-hover-blue);
}
@mixin close-link() {
  @include default-link($color-gray, $color-black);
}

@mixin field-error() {
  color: $color-red;
  font-size: 13px;
  line-height: line-height(16, 13);
  display: block;
  margin-top: 5px;
}

@mixin custom-scroll($track-indent-vertical: 0, $track-indent-horizontal: 0,) {
  ::-webkit-scrollbar {
    @include size(5px);
    transition: background 0.3s;
  }
  ::-webkit-scrollbar-track {
    margin: $track-indent-vertical $track-indent-horizontal;
    background: $color-transparent;
    border-radius: $radius-50;
  }
  ::-webkit-scrollbar-thumb {
    background: $color-outline-gray;
    border-radius: $radius-50;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: $color-gray;
  }
  ::-webkit-scrollbar-thumb:active {
  }
}

@mixin hide-scrollbar() {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
  &::-webkit-scrollbar { /* Hide scrollbar for Chrome, Safari and Opera */
    display: none;
  }
}

@mixin img-ofi($object-fit: "cover") {
  display: block;
  @include position(absolute, 0);
  @include size(100%);
  object-fit: $object-fit;
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin interplay() {
  &:hover,
  &:focus {
    background-color: #ebebeb;
  }

  &:active {
    background-color: #919191;
  }
}

// This triangle can be used as hint or in the dropdown list instead of svg-icon
@mixin css-triangle($color: $color-orange, $direction: "up", $size: 6px, $position: absolute) {
  @include pseudo($pos: $position);
  @include size(0);
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}
